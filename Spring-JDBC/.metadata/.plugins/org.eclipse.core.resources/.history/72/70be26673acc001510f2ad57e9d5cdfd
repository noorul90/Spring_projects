package com.qa.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.eclipse.core.internal.runtime.FindSupport;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowMapper;

import com.qa.bo.StudentBO;
import com.qa.bo.StudentDetailsBO;

public class StudentDao {
	private final String SQL_GET_NO_OF_STUDENT = "SELECT COUNT(1) FROM STUDENT";
	private final String SQL_FIND_STUDENT_NAME_BY_ID = "SELECT NAME FROM STUDENT WHERE STUDENT_ID = ?";
	private final String SQL_FIND_STUDENT_BY_ID = "SELECT STUDENT_ID, NAME FROM STUDENT WHERE STUDENT_ID = ?";
	private final String SQL_GET_STUDENT_BY_NAME = "SELECT STUDENT_ID, NAME FROM STUDENT WHERE NAME LIKE ?";
	private final String SQL_GET_ALL_STUDENTS_NAME_AND_MOBILE = "SELECT NAME, MOBILE FROM STUDENT";
	private final String SQL_GET_STUDENTS_AND_COURSE = "SELECT s.*,c.name from student s,course c,student_course sc where s.student_id = sc.student_id and sc.course_id = c.course_id where c.name like ?";
	
	private JdbcTemplate jdbcTemplate;

	public StudentDao(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}
	
	// inner class for mapping 1 row into a StudentBO class object
	private static final class StudentBoRowMapper implements RowMapper<StudentBO>{
		@Override
		public StudentBO mapRow(ResultSet rs, int row) throws SQLException {
			return new StudentBO(rs.getInt("student_id"),rs.getString("name"));
		}
		
	}
	
	//inner class for rollup logic
	private final static class StudentDetailsResultSetExtractor implements ResultSetExtractor<List<StudentDetailsBO>>{

		@Override
		public List<StudentDetailsBO> extractData(ResultSet rs)
				throws SQLException, DataAccessException {
			int studentId=0;
			int i=0;
			List<StudentDetailsBO> lsdbo=null;
			StudentDetailsBO studentDetailsBo=null;
			StudentBO studentBo=null;
			
			lsdbo = new ArrayList<StudentDetailsBO>();
			while(rs.next()){
			studentId = rs.getInt("student_id");
			studentDetailsBo = findStudentDetails(lsdbo,studentId);
			if(studentDetailsBo==null)
			{
				studentBo=new StudentBO(rs.getInt("STUDENT_ID"), rs.getString("NAME"), rs.getInt("MOBILE"), rs.getString("EMAIL"));
				
				studentDetailsBo=new StudentDetailsBO();
				studentDetailsBo.setStudentBo(studentBo);
				studentDetailsBo.getCources().add(rs.getString("CNAME"));
				students.add(studentDetailsBO);
				
			}
			else
			{
				studentDetailsBO.getCources().add(rs.getString("CNAME"));
			}
			
		}
		
		return students;
		}
		
		// INNER class method
		private StudentDetailsBO findStudentDetails(List<StudentDetailsBO> students, int studentId) {
			StudentBO studentBo = null;
			StudentDetailsBO studentDetailsBo = null;

			if (students != null && students.size() > 0) {
				for (StudentDetailsBO student : students) {
					studentBo = student.getStudentBo();
					if (studentBo.getId() == studentId) {
						studentDetailsBo = student;
						break;
					}
				}
			}
			return studentDetailsBo;
		}
	}
	
	
	/*private final static class StudentDetailsBoResultSetExtracter implements ResultSetExtractor<List<StudentDetailsBO>>
	{

		public List<StudentDetailsBO> extractData(ResultSet rs)
				throws SQLException, DataAccessException {
			
			List<StudentDetailsBO> students=null;
			StudentDetailsBO studentDetailsBO=null;
			StudentBO studentBO=null;
			int studentId=0;
			int i=0;
			students=new ArrayList<StudentDetailsBO>();
			while(rs.next())
			{
				studentId=rs.getInt("STUDENT_ID");
				studentDetailsBO=findStudentDetails(students, studentId);
				if(studentDetailsBO==null)
				{
					studentBO=new StudentBO(rs.getInt("STUDENT_ID"), rs.getString("NAME"), rs.getInt("MOBILE"), rs.getString("EMAIL"));
					
					studentDetailsBO=new StudentDetailsBO();
					studentDetailsBO.setStudentBO(studentBO);
					studentDetailsBO.getCources().add(rs.getString("CNAME"));
					students.add(studentDetailsBO);
					
				}
				else
				{
					studentDetailsBO.getCources().add(rs.getString("CNAME"));
				}
				
			}
			
			return students;
		}
		
		//INNER class method
		private StudentDetailsBO findStudentDetails(List<StudentDetailsBO> students,int studentId)
		{
			StudentBO studentBO=null;
			StudentDetailsBO studentDetailsBO=null;
			
			if(students != null && students.size()>0)
			{
				for(StudentDetailsBO student:students)
				{
					studentBO=student.getStudentBO();
					if(studentBO.getId()==studentId)
					{
						 studentDetailsBO=student;
						 break;
					}//end of if
				}//end of for
			}//end of if
			return studentDetailsBO;
		}
		
	}
		
		*/
	
	
	
	
	
	//if method return collections of value then name the method as getter method means method name start with get
	//Aggregate Query
	public int getNoOfStudents(){
		return jdbcTemplate.queryForInt(SQL_GET_NO_OF_STUDENT);
	}
	
	//if method return 1 value then name the method as finder method means method name start with find
	//selecting 1 row 1 column
	public String findStudentNameById(int id){
		return jdbcTemplate.queryForObject(SQL_FIND_STUDENT_NAME_BY_ID, String.class, new Object[]{id});
		
	}
	
	//selecting 1 record/row of data
	public StudentBO findStudentById(int id){
		return jdbcTemplate.queryForObject(SQL_FIND_STUDENT_BY_ID, new Object[]{id}, new StudentBoRowMapper());
	}
	
	//selecting multiple record/rows of data
	public List<StudentBO> getAllStudents(String name){
		//String[] args = {"%"+name+"%"};
		//return jdbcTemplate.query(SQL_GET_STUDENT_BY_NAME, args, new StudentBoRowMapper());
		return jdbcTemplate.query(SQL_GET_STUDENT_BY_NAME, new Object[]{name}, new StudentBoRowMapper());
	}
	
	//selecting multiple record of partial columns from table (partial query)
	public List<Map<String,Object>> getAllStudentsNameAndMobile(){
		return jdbcTemplate.queryForList(SQL_GET_ALL_STUDENTS_NAME_AND_MOBILE);
	}
	
	
	
}
